---
layout: post
title:  "First"
date:   2024-02-22 12:22:47 +1300
categories: networks
---
1. setup a legacy linux OS
1.1 use virtual box
1.2 download an old ubuntu server
  https://old-releases.ubuntu.com/releases/dapper/ubuntu-6.06.2-server-i386.iso
1.3 create a VM in VirtualBox
2 copy files
2.1 set up SSH server at linux
sudo apt-get install openssh-server
you will be asked to insert a CD-rom. Click the CD-ROM icon and choose the iso file you used for installing the Linux server. 
2.2 configure virtual box with port forwarding
    in Virtual Box, choose Settings>>Network>>Advanced>>port forwarding
    add a new rule "ssh" for ssh:
    host IP: 0.0.0.0
    host port: 2233
    guest IP: blank
    guest port:22
(NAT is used for Adapter 1: attached to NAT)
2.3 scp files from host (windows laptop) to guest
scp -P 2233 db_generator.tar.gz wu@127.0.0.1:/home/wu
scp all other files similarly;
(scp might not work due to key issue, delete the line in c:\users\xwu25\.ssh\know_hosts, and try again)
2.4 on guest OS unzip all the files received
tar -zxvf db_generator.tar.gz
2.5 install make on guest OS
sudo apt-get install make
2.5 install g++ and build-essentials on guest OS
sudo apt-get install g++
sudo apt-get install build-essential
2.6 modify makefile in db_generator (a folder)
use CFLAGS = -g -pg and remove the current setting
2.7 use "make all" to compile db_generator
the end. 
2.8 use db_generator to generate a file test1000acl and 
2.9 on host Laptop copy test1000acl to the current directory
  scp -P 2233 wu@127.0.0.1:/home/wu/db_generator/test1000acl .


You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
